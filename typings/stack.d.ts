export declare class Stack {
    private _query;
    private config;
    private client;
    private collection;
    private internal;
    private db;
    constructor(...stack_arguments: any[]);
    ascending(field: any): this;
    descending(field: any): this;
    connect(overrides?: {}): Promise<{}>;
    close(): void;
    and(...queries: any[]): this;
    or(...queries: any[]): this;
    lessThan(key: any, value: any): this;
    lessThanOrEqualTo(key: any, value: any): this;
    greaterThan(key: any, value: any): this;
    greaterThanOrEqualTo(key: any, value: any): this;
    notEqualTo(key: any, value: any): this;
    containedIn(key: any, value: any): this;
    notContainedIn(key: any, value: any): this;
    exists(key: any): this;
    notExists(key: any): this;
    contentType(uid: any): this;
    entry(uid?: any): this;
    entries(): this;
    asset(uid?: any): this;
    assets(): this;
    limit(no: any): this;
    skip(no: any): this;
    query(queryObject?: {}): this;
    only(fields: any): this;
    except(fields: any): this;
    regex(field: any, pattern: any, options?: string): this;
    tags(values: any): this;
    where(...expr: any[]): this;
    count(): this;
    includeCount(): this;
    includeSchema(): this;
    schema(uid?: any): this;
    schemas(): this;
    getQuery(): any;
    private preProcess;
    private postProcess;
    private cleanup;
    find(query?: {}): Promise<{}>;
}
