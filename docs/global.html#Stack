<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>JSDoc: Class: Stack</title>

    <script src="scripts/prettify/prettify.js"> </script>
    <script src="scripts/prettify/lang-css.js"> </script>
    <!--[if lt IE 9]>
      <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" href="styles/prettify-tomorrow.css">
    <link type="text/css" rel="stylesheet" href="styles/jsdoc-default.css">
</head>

<body>

<div id="main">

    <h1 class="page-title">Class: Stack</h1>

    




<section>

<header>
    
        <h2><span class="attribs"><span class="type-signature"></span></span>Stack<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h2>
        
    
</header>

<article>
    <div class="container-overview">
    
        

    

    
    <h4 class="name" id="Stack"><span class="type-signature"></span>new Stack<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Initialize an instance of `Stack`
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="index.js.html">index.js</a>, <a href="index.js.html#line9">line 9</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns Stack method, which's used to create an instance of Stack
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>const Stack = Contentstack.Stack({
 contentStore: {
   baseDir: '../../dev-contents'
 },
 locales: [
   {
     code: 'en-us',
     relative_url_prefix: '/'
   }
 ]
})</code></pre>



    
    </div>

    

    

    

    

    

    

    

    
        <h3 class="subsection-title">Methods</h3>

        
            

    

    
    <h4 class="name" id="except"><span class="type-signature"></span>except<span class="signature">(fields)</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Projections - returns fields except the ones passed here
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>fields</code></td>
            

            <td class="type">
            
                
<span class="param-type">array</span>


            
            </td>

            

            

            <td class="description last">Array of 'fields', separated by dot ('.') notation for embedded document query</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line1013">line 1013</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .except(["title", "url", "links"])
 .find()
 .then((result) => {
   // returns entries and projects all of their properties, except - ["title", "url", "links"]
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="includeContentType"><span class="type-signature"></span>includeContentType<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Includes 'content_type' key in response, which is the content type schema of the entries filtered/scanned
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line1224">line 1224</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .includeContentType()
 .find()
 .then((result) => {
   // returns entries, along with a 'content_type' property, which is 'blog' content type's schema
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="includeCount"><span class="type-signature"></span>includeCount<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Includes 'count' key in response, which is the total count of the items being returned
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line1180">line 1180</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .includeCount()
 .find()
 .then((result) => {
   // returns entries, along with a 'count' property, with the total count of entries being returned
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="includeReferences"><span class="type-signature"></span>includeReferences<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Includes all references of the entries being returned.
Note: This is a slow method, since it iteratively queries all the references and their references, binds them and returns
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line1247">line 1247</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .includeReferences()
 .find()
 .then((result) => {
   // returns entries, along with all their references and their nested references
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="includeSchema"><span class="type-signature"></span>includeSchema<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Includes 'content_type' key in response, which is the content type schema of the entries filtered/scanned
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line1202">line 1202</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .includeSchema()
 .find()
 .then((result) => {
   // returns entries, along with a 'content_type' property, which is 'blog' content type's schema
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="limit"><span class="type-signature"></span>limit<span class="signature">(no)</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Parameter - used to limit the total no of items returned/scanned
Defaults to 100 (internally, which is overridden)
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>no</code></td>
            

            <td class="type">
            
                
<span class="param-type">number</span>


            
            </td>

            

            

            <td class="description last">Max count of the 'items' returned</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line897">line 897</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .limit(20)
 .find()
 .then((result) => {
   // returns a maximum of 20 entries
   // if not provided, by default - the limit specified in config is returned
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="only"><span class="type-signature"></span>only<span class="signature">(fields)</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Projections - returns only the fields passed here
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>fields</code></td>
            

            <td class="type">
            
                
<span class="param-type">array</span>


            
            </td>

            

            

            <td class="description last">Array of 'fields', separated by dot ('.') notation for embedded document query</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line981">line 981</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .only(["title", "url", "links"])
 .find()
 .then((result) => {
   // returns entries and projects only their - ["title", "url", "links"] properties
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="query"><span class="type-signature"></span>query<span class="signature">(queryObject)</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Wrapper around a raw query wrapper
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>queryObject</code></td>
            

            <td class="type">
            
                
<span class="param-type">object</span>


            
            </td>

            

            

            <td class="description last">Query filter</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line952">line 952</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .query({"group.heading": "Tab 1"})
 .find()
 .then((result) => {
   // returns entries that have - {"group.heading": "Tab 1"}
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="regex"><span class="type-signature"></span>regex<span class="signature">(field, pattern, options)</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Raw regex to be applied on a field - wrapper
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        
        <th>Default</th>
        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>field</code></td>
            

            <td class="type">
            
                
<span class="param-type">string</span>


            
            </td>

            

            
                <td class="default">
                
                </td>
            

            <td class="description last">Field on which the regex is to be applied on</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>pattern</code></td>
            

            <td class="type">
            
                
<span class="param-type">pattern</span>


            
            </td>

            

            
                <td class="default">
                
                </td>
            

            <td class="description last">Regex pattern</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">options</span>


            
            </td>

            

            
                <td class="default">
                
                    i
                
                </td>
            

            <td class="description last">Options to be applied while evaluating the regex</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line1047">line 1047</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .regex("name", "^J")
 .find()
 .then((result) => {
   // returns entries who's name properties start with "J"
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="skip"><span class="type-signature"></span>skip<span class="signature">(no)</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Parameter - used to skip initial no of items scanned
Defaults to 0 (internally, which is overridden)
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>no</code></td>
            

            <td class="type">
            
                
<span class="param-type">number</span>


            
            </td>

            

            

            <td class="description last">Min count of the 'items' to be scanned</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line926">line 926</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .skip(10)
 .find()
 .then((result) => {
   // returnes entries, after first skipping 20 entries of 'blog' content type
   // if not provided, by default - the skip value provided in config is considered
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="tags"><span class="type-signature"></span>tags<span class="signature">(values)</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Match entries that match a specific tags
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>values</code></td>
            

            <td class="type">
            
                
<span class="param-type">array</span>


            
            </td>

            

            

            <td class="description last">Array of tag values</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line1088">line 1088</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .tags(["new", "fresh"])
 .find()
 .then((result) => {
   // returns entries filtered based on their tag fields
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="where"><span class="type-signature"></span>where<span class="signature">(expr)</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    
    <p class="summary">Pass JS expression or a full function to the query system</p>
    



<div class="description">
    Use the $where operator to pass either a string containing a JavaScript expression or a full JavaScript function to the query system.
The $where provides greater flexibility, but requires that the database processes the JavaScript expression or function for each document in the collection.
Reference the document in the JavaScript expression or function using either this or obj.
Only apply the $where query operator to top-level documents.
The $where query operator will not work inside a nested document, for instance, in an $elemMatch query.
Ref. - https://docs.mongodb.com/manual/reference/operator/query/where/index.html
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>expr</code></td>
            

            <td class="type">
            
                
<span class="param-type">*</span>


            
            </td>

            

            

            <td class="description last">Pass either a string containing a JavaScript expression or a full JavaScript function to the query system.</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line1139">line 1139</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .where(function() {
   return (hex_md5(this.name) === "9b53e667f30cd329dca1ec9e6a83e994")
 })
 .find()
 .then((result) => {
   // returns entries filtered based on the $where condition provided
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
    

    

    
</article>

</section>







<section>

<header>
    
        <h2><span class="attribs"><span class="type-signature"></span></span>Stack<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h2>
        
            <div class="class-description">Stack</div>
        
    
</header>

<article>
    <div class="container-overview">
    
        

    
    <h2>Constructor</h2>
    

    
    <h4 class="name" id="Stack"><span class="type-signature"></span>new Stack<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Provides a range of connection/disconnect, filters and projections on mongodb
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line23">line 23</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of `Stack`
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    





    
    </div>

    

    

    

    

    

    

    

    
        <h3 class="subsection-title">Methods</h3>

        
            

    

    
    <h4 class="name" id="except"><span class="type-signature"></span>except<span class="signature">(fields)</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Projections - returns fields except the ones passed here
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>fields</code></td>
            

            <td class="type">
            
                
<span class="param-type">array</span>


            
            </td>

            

            

            <td class="description last">Array of 'fields', separated by dot ('.') notation for embedded document query</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line1013">line 1013</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .except(["title", "url", "links"])
 .find()
 .then((result) => {
   // returns entries and projects all of their properties, except - ["title", "url", "links"]
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="includeContentType"><span class="type-signature"></span>includeContentType<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Includes 'content_type' key in response, which is the content type schema of the entries filtered/scanned
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line1224">line 1224</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .includeContentType()
 .find()
 .then((result) => {
   // returns entries, along with a 'content_type' property, which is 'blog' content type's schema
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="includeCount"><span class="type-signature"></span>includeCount<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Includes 'count' key in response, which is the total count of the items being returned
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line1180">line 1180</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .includeCount()
 .find()
 .then((result) => {
   // returns entries, along with a 'count' property, with the total count of entries being returned
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="includeReferences"><span class="type-signature"></span>includeReferences<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Includes all references of the entries being returned.
Note: This is a slow method, since it iteratively queries all the references and their references, binds them and returns
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line1247">line 1247</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .includeReferences()
 .find()
 .then((result) => {
   // returns entries, along with all their references and their nested references
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="includeSchema"><span class="type-signature"></span>includeSchema<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Includes 'content_type' key in response, which is the content type schema of the entries filtered/scanned
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line1202">line 1202</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .includeSchema()
 .find()
 .then((result) => {
   // returns entries, along with a 'content_type' property, which is 'blog' content type's schema
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="limit"><span class="type-signature"></span>limit<span class="signature">(no)</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Parameter - used to limit the total no of items returned/scanned
Defaults to 100 (internally, which is overridden)
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>no</code></td>
            

            <td class="type">
            
                
<span class="param-type">number</span>


            
            </td>

            

            

            <td class="description last">Max count of the 'items' returned</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line897">line 897</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .limit(20)
 .find()
 .then((result) => {
   // returns a maximum of 20 entries
   // if not provided, by default - the limit specified in config is returned
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="only"><span class="type-signature"></span>only<span class="signature">(fields)</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Projections - returns only the fields passed here
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>fields</code></td>
            

            <td class="type">
            
                
<span class="param-type">array</span>


            
            </td>

            

            

            <td class="description last">Array of 'fields', separated by dot ('.') notation for embedded document query</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line981">line 981</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .only(["title", "url", "links"])
 .find()
 .then((result) => {
   // returns entries and projects only their - ["title", "url", "links"] properties
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="query"><span class="type-signature"></span>query<span class="signature">(queryObject)</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Wrapper around a raw query wrapper
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>queryObject</code></td>
            

            <td class="type">
            
                
<span class="param-type">object</span>


            
            </td>

            

            

            <td class="description last">Query filter</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line952">line 952</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .query({"group.heading": "Tab 1"})
 .find()
 .then((result) => {
   // returns entries that have - {"group.heading": "Tab 1"}
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="regex"><span class="type-signature"></span>regex<span class="signature">(field, pattern, options)</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Raw regex to be applied on a field - wrapper
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        
        <th>Default</th>
        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>field</code></td>
            

            <td class="type">
            
                
<span class="param-type">string</span>


            
            </td>

            

            
                <td class="default">
                
                </td>
            

            <td class="description last">Field on which the regex is to be applied on</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>pattern</code></td>
            

            <td class="type">
            
                
<span class="param-type">pattern</span>


            
            </td>

            

            
                <td class="default">
                
                </td>
            

            <td class="description last">Regex pattern</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">options</span>


            
            </td>

            

            
                <td class="default">
                
                    i
                
                </td>
            

            <td class="description last">Options to be applied while evaluating the regex</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line1047">line 1047</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .regex("name", "^J")
 .find()
 .then((result) => {
   // returns entries who's name properties start with "J"
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="skip"><span class="type-signature"></span>skip<span class="signature">(no)</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Parameter - used to skip initial no of items scanned
Defaults to 0 (internally, which is overridden)
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>no</code></td>
            

            <td class="type">
            
                
<span class="param-type">number</span>


            
            </td>

            

            

            <td class="description last">Min count of the 'items' to be scanned</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line926">line 926</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .skip(10)
 .find()
 .then((result) => {
   // returnes entries, after first skipping 20 entries of 'blog' content type
   // if not provided, by default - the skip value provided in config is considered
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="tags"><span class="type-signature"></span>tags<span class="signature">(values)</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    



<div class="description">
    Match entries that match a specific tags
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>values</code></td>
            

            <td class="type">
            
                
<span class="param-type">array</span>


            
            </td>

            

            

            <td class="description last">Array of tag values</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line1088">line 1088</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .tags(["new", "fresh"])
 .find()
 .then((result) => {
   // returns entries filtered based on their tag fields
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
            

    

    
    <h4 class="name" id="where"><span class="type-signature"></span>where<span class="signature">(expr)</span><span class="type-signature"> &rarr; {<a href="global.html#Stack">Stack</a>}</span></h4>
    

    
    <p class="summary">Pass JS expression or a full function to the query system</p>
    



<div class="description">
    Use the $where operator to pass either a string containing a JavaScript expression or a full JavaScript function to the query system.
The $where provides greater flexibility, but requires that the database processes the JavaScript expression or function for each document in the collection.
Reference the document in the JavaScript expression or function using either this or obj.
Only apply the $where query operator to top-level documents.
The $where query operator will not work inside a nested document, for instance, in an $elemMatch query.
Ref. - https://docs.mongodb.com/manual/reference/operator/query/where/index.html
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>expr</code></td>
            

            <td class="type">
            
                
<span class="param-type">*</span>


            
            </td>

            

            

            <td class="description last">Pass either a string containing a JavaScript expression or a full JavaScript function to the query system.</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="stack.js.html">stack.js</a>, <a href="stack.js.html#line1139">line 1139</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Returns:</h5>

        
<div class="param-desc">
    Returns an instance of 'stack'
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Stack">Stack</a></span>


    </dd>
</dl>

    




    <h5>Example</h5>
    
    <pre class="prettyprint"><code>Stack
 .contentType('blog')
 .entries()
 .where(function() {
   return (hex_md5(this.name) === "9b53e667f30cd329dca1ec9e6a83e994")
 })
 .find()
 .then((result) => {
   // returns entries filtered based on the $where condition provided
 })
 .catch((error) => {
   // handle query errors
 })</code></pre>



        
    

    

    
</article>

</section>




</div>

<nav>
    <h2><a href="index.html">Home</a></h2><h3>Classes</h3><ul><li><a href="global.html#Stack">Stack</a></li></ul><h3>Global</h3><ul><li><a href="global.html#and">and</a></li><li><a href="global.html#ascending">ascending</a></li><li><a href="global.html#asset">asset</a></li><li><a href="global.html#assets">assets</a></li><li><a href="global.html#close">close</a></li><li><a href="global.html#connect">connect</a></li><li><a href="global.html#containedIn">containedIn</a></li><li><a href="global.html#contentType">contentType</a></li><li><a href="global.html#count">count</a></li><li><a href="global.html#descending">descending</a></li><li><a href="global.html#entries">entries</a></li><li><a href="global.html#entry">entry</a></li><li><a href="global.html#excludeReferences">excludeReferences</a></li><li><a href="global.html#exists">exists</a></li><li><a href="global.html#find">find</a></li><li><a href="global.html#findOne">findOne</a></li><li><a href="global.html#getQuery">getQuery</a></li><li><a href="global.html#greaterThan">greaterThan</a></li><li><a href="global.html#greaterThanOrEqualTo">greaterThanOrEqualTo</a></li><li><a href="global.html#language">language</a></li><li><a href="global.html#lessThan">lessThan</a></li><li><a href="global.html#lessThanOrEqualTo">lessThanOrEqualTo</a></li><li><a href="global.html#notContainedIn">notContainedIn</a></li><li><a href="global.html#notEqualTo">notEqualTo</a></li><li><a href="global.html#notExists">notExists</a></li><li><a href="global.html#or">or</a></li><li><a href="global.html#queryReferences">queryReferences</a></li><li><a href="global.html#schema">schema</a></li><li><a href="global.html#schemas">schemas</a></li></ul>
</nav>

<br class="clear">

<footer>
    Documentation generated by <a href="https://github.com/jsdoc3/jsdoc">JSDoc 3.5.5</a> on Thu Mar 28 2019 12:10:10 GMT+0530 (IST)
</footer>

<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</body>
</html>